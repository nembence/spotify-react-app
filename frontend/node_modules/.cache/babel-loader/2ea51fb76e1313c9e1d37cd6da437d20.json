{"ast":null,"code":"var _jsxFileName = \"/home/mag/Documents/codecool/advanced/spotify-react-app/src/components/SearchHandler/SearchHandler.jsx\";\nimport React from \"react\";\nimport useFetch from \"../../utilities/useFetch\";\nimport Loading from \"../Loading/Loading\";\nimport Error from \"../Error/Error\";\nimport ArtistCard from \"../Cards/ArtistCard/ArtistCard\";\nimport AlbumCard from \"../Cards/AlbumCard/AlbumCard\";\nimport PlaylistCard from \"../Cards/PlaylistCard/PlaylistCard\";\nimport TrackCard from \"../Cards/TrackCard/TrackCard\";\nimport { Divider } from \"semantic-ui-react\";\n\nconst SearchHandler = ({\n  urlString,\n  categoryType\n}) => {\n  const [status, error, fetchedData] = useFetch(urlString, categoryType);\n  const dividerStlye = {\n    maxWidth: \"940px\"\n  };\n\n  const renderedCard = data => {\n    switch (categoryType) {\n      case \"artist\":\n        return /*#__PURE__*/React.createElement(ArtistCard, {\n          data: data,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 24\n          }\n        });\n\n      case \"album\":\n        return /*#__PURE__*/React.createElement(AlbumCard, {\n          data: data,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 24\n          }\n        });\n\n      case \"playlist\":\n        return /*#__PURE__*/React.createElement(PlaylistCard, {\n          data: data,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 24\n          }\n        });\n\n      case \"track\":\n        return /*#__PURE__*/React.createElement(TrackCard, {\n          data: data,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 24\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, status === \"error\" && /*#__PURE__*/React.createElement(Error, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 36\n    }\n  }), status === \"loading\" && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 38\n    }\n  }), status === \"loaded\" && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    style: dividerStlye,\n    horizontal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, categoryType), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui stackable three column grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, fetchedData.map(data => renderedCard(data)))));\n};\n\nexport default SearchHandler;","map":{"version":3,"sources":["/home/mag/Documents/codecool/advanced/spotify-react-app/src/components/SearchHandler/SearchHandler.jsx"],"names":["React","useFetch","Loading","Error","ArtistCard","AlbumCard","PlaylistCard","TrackCard","Divider","SearchHandler","urlString","categoryType","status","error","fetchedData","dividerStlye","maxWidth","renderedCard","data","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AACnD,QAAM,CAACC,MAAD,EAASC,KAAT,EAAgBC,WAAhB,IAA+Bb,QAAQ,CAACS,SAAD,EAAYC,YAAZ,CAA7C;AAEA,QAAMI,YAAY,GAAG;AACjBC,IAAAA,QAAQ,EAAE;AADO,GAArB;;AAIA,QAAMC,YAAY,GAAGC,IAAI,IAAI;AACzB,YAAQP,YAAR;AACI,WAAK,QAAL;AACI,4BAAO,oBAAC,UAAD;AAAY,UAAA,IAAI,EAAEO,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ,WAAK,OAAL;AACI,4BAAO,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAEA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ,WAAK,UAAL;AACI,4BAAO,oBAAC,YAAD;AAAc,UAAA,IAAI,EAAEA,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ,WAAK,OAAL;AACI,4BAAO,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAEA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACJ;AACI,4BAAO,yCAAP;AAVR;AAYH,GAbD;;AAeA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,MAAM,KAAK,OAAX,iBAAsB,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD3B,EAEKD,MAAM,KAAK,SAAX,iBAAwB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAF7B,EAGKA,MAAM,KAAK,QAAX,iBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEG,YAAhB;AAA8B,IAAA,UAAU,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,YADL,CADJ,eAII;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,WAAW,CAACK,GAAZ,CAAgBD,IAAI,IAAID,YAAY,CAACC,IAAD,CAApC,CADL,CAJJ,CAJR,CADJ;AAgBH,CAtCD;;AAwCA,eAAeT,aAAf","sourcesContent":["import React from \"react\";\nimport useFetch from \"../../utilities/useFetch\";\nimport Loading from \"../Loading/Loading\";\nimport Error from \"../Error/Error\";\nimport ArtistCard from \"../Cards/ArtistCard/ArtistCard\";\nimport AlbumCard from \"../Cards/AlbumCard/AlbumCard\";\nimport PlaylistCard from \"../Cards/PlaylistCard/PlaylistCard\";\nimport TrackCard from \"../Cards/TrackCard/TrackCard\";\nimport { Divider } from \"semantic-ui-react\";\n\nconst SearchHandler = ({ urlString, categoryType }) => {\n    const [status, error, fetchedData] = useFetch(urlString, categoryType);\n\n    const dividerStlye = {\n        maxWidth: \"940px\"\n    };\n\n    const renderedCard = data => {\n        switch (categoryType) {\n            case \"artist\":\n                return <ArtistCard data={data} />;\n            case \"album\":\n                return <AlbumCard data={data} />;\n            case \"playlist\":\n                return <PlaylistCard data={data} />;\n            case \"track\":\n                return <TrackCard data={data} />;\n            default:\n                return <></>;\n        }\n    };\n\n    return (\n        <div>\n            {status === \"error\" && <Error error={error} />}\n            {status === \"loading\" && <Loading />}\n            {status === \"loaded\" && (\n                <div>\n                    <Divider style={dividerStlye} horizontal>\n                        {categoryType}\n                    </Divider>\n                    <div className='ui stackable three column grid'>\n                        {fetchedData.map(data => renderedCard(data))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SearchHandler;\n"]},"metadata":{},"sourceType":"module"}